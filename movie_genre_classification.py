# -*- coding: utf-8 -*-
"""Movie Genre Classification

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1e8gnffcwJi3YOGHWILaD7KSqbsCBAB4K
"""

import pandas as pd
import numpy as np

data_raw = pd.read_csv("/content/train_data.csv")
data_raw = data_raw.dropna(axis=1)

test = pd.read_csv('/content/test_data_solution.csv')
test = test.dropna(axis=1)

data = pd.DataFrame()
data['Description'] = data_raw['Description'][0:54200]
data['Genre'] = data_raw['Genre'][0:54200]

x_test = test['Description']
y_test = test['Class']
# x_test = countvector.fit_transform(test['Description'])

# label_encoder = LabelEncoder()
# data['Genre'] = label_encoder.fit_transform(data['Genre'])

import string
# string.punctuation

def rem_punc(text):
  punc_free = "".join(i for i in text if i not in string.punctuation)
  return punc_free

data['Description'] = data['Description'].apply(lambda x: rem_punc(x))
print(data)

test['Description'] = test['Description'].apply(lambda x: rem_punc(x))
print(test)

from sklearn.feature_extraction.text import CountVectorizer

countvector = CountVectorizer()

combined_data = data['Description']+x_test

combined_data_vectors = countvector.fit_transform(combined_data)

x_train_counts = countvector.transform(data['Description'])
x_test_counts = countvector.transform(x_test)

y = data['Genre']
y

from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split

# x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.3)

model = DecisionTreeClassifier()

model.fit(x_train_counts, y)

y_pred = model.predict(x_test_counts)

model.score(x_test_counts, test['Class'])

from sklearn.metrics import accuracy_score, classification_report

# acc = accuracy_score(y_test, y_pred)
# acc
# report = classification_report(y_test, y_pred)
# print(report)

inp = "When a sadistic serial killer begins murdering key political figures in Gotham, Batman is forced to investigate the city's hidden corruption and question his family's involvement."

inp = countvector.transform([inp]).toarray()

model.predict(inp)